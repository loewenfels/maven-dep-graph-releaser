version = "1.3.0-SNAPSHOT"
group = 'ch.loewenfels.depgraph'

buildscript {
    ext {
        //main
        kotlin_version = '1.5.21'
        pom_explorer_version = '1.3.21'
        moshi_version = '1.6.0'
        okhttp_version = '3.10.0'
        kotlin_html_version = '0.6.12'
        kbox_version = '0.14.1'

        //test
        atrium_version = '0.8.0'
        mockito_kotlin_version = '1.6.0'
        spek_version = '2.0.8'
        tutteli_spek_extensions = '1.1.0'
        niok_version = '1.2.0'

        //gh-pages.gradle
        ghPages_version = version
        dokka_sourceMapping = 'tree/master'
        docProjects = subprojects
        srcKotlin = 'src/main/kotlin'
        github_url = "https://github.com/loewenfels/${rootProject.name}"

        //jacoco-multi-project.gradle
        jacoco_tool_version = '0.8.5'
        projectsWithoutSources = [] //currently all have sources

        // detekt/sonarcloud
        detekt_version = '1.5.1'

        apiProjects = subprojects.findAll { it.name.contains('api') }
        apiJvmProjects = ext.apiProjects.findAll { it.name.endsWith('-jvm') }
        apiJsProjects = ext.apiProjects.findAll { it.name.endsWith('-js') }
        apiCommonProjects = ext.apiProjects - ext.apiJvmProjects - ext.apiJsProjects

        jvmProjects = subprojects - project("${rootProject.name}-gui") - ext.apiJsProjects - ext.apiCommonProjects
        jacocoMulti = [
            sourceProjects: jvmProjects - project(':atrium') + apiJvmProjects,
            jacocoProjects: jvmProjects.findAll {
                it.name != "${rootProject.name}-maven-api" &&
                    it.name != "atrium"
            } - projectsWithoutSources + apiJvmProjects
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-dokka:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-kotlin-utils:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-publish:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-spek:${gradle.ext.tutteli_plugins_version}"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

apply plugin: 'ch.tutteli.project.utils'
apply plugin: 'ch.tutteli.kotlin.utils'
kotlinutils.kotlinVersion = kotlin_version
apply plugin: "io.gitlab.arturbosch.detekt"

detekt {
    toolVersion = detekt_version
    failFast = true
    input = files(subprojects*.collect { it.projectDir })
    config.setFrom(files("$rootProject.projectDir/gradle/scripts/detekt.yml"))
    autoCorrect = true
    reports {
        xml.enabled = true
    }
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt) {
    exclude(".*/resources/.*")
    exclude(".dep-graph-releaser/.*/build/.*")
}

repositories {
    mavenCentral()
    jcenter()
}

subprojects {
    it.version = rootProject.version
    it.group = rootProject.group

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/robstoll/copies" }
        maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
    }
}

configureCommonProjects()
configureJsProjects()
configureJvmProjects()

configure(jvmProjects - apiProjects) {
    apply plugin: 'kotlin'

    dependencies {
        compile kotlinStdlib()
        compile kotlinReflect()
    }
}

def jvmPublishedProjects = jvmProjects - project(':atrium')
def publishedProjects = subprojects - project(':atrium')

def projectsWithSources = jvmPublishedProjects - projectsWithoutSources
configure(projectsWithSources) {
    apply plugin: 'ch.tutteli.dokka'
    tutteliDokka.githubUser = 'loewenfels'
}

configure(prefixedProject('gui')) {
    apply plugin: "kotlin2js"

    compileKotlin2Js {
        kotlinOptions.moduleKind = "umd"
        kotlinOptions.sourceMap = true
        kotlinOptions.sourceMapEmbedSources = "always"
    }
}

configure(publishedProjects) { subproject ->
    apply plugin: 'ch.tutteli.publish'
    tutteliPublish {
        githubUser = 'loewenfels'
        bintrayOrganisation = 'loewenfels'
        bintrayRepo = 'oss'
        manifestVendor = 'Loewenfels Partner AG'
        resetLicenses 'EUPL-1.2'
    }
}

configure(jacocoMulti.jacocoProjects) {
    apply plugin: 'ch.tutteli.spek'

    dependencies {
        testCompile project(':atrium')
    }
}


apply from: 'gradle/scripts/jacoco-multi-project.gradle'
apply from: 'gradle/scripts/gh-pages.gradle'

/*

Release & deploy
-----------------
1. search for X.Y.Z-SNAPSHOT and change to X.Y.Z
2. update master:
    a) point to the tag
        1) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        2) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) commit & push modified build.gradle, README.md, index.html, jenkins.pom with message `vX.Y.Z`
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
3. deploy to bintray:
    a) gr clean publishBintray
    b) Log in to bintray, navigate to https://bintray.com/loewenfels/oss -> check and publish new jars
4. create release on github
5. update example gh-pages
    a) gr html -PmvnIds=ch.loewenfels.depgraph:dgr-4
    b) skip if already done:
        1) clone the project into a separate folder dep-graph-releaser-gh-pages (outside of the project)
        2) change to branch gh-pages
    c) copy the content of dep-graph-releaser/build/html to dep-graph-releaser-gh-pages
    d) git add .
    e) git commit -m "update example to vX.Y.Z"
    f) git push

Prepare next dev cycle
-----------------------
1. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
2. search for X.Y.Z and change to X.Y+1.Z-SNAPSHOT
3. commit & push changes (message `prepare vX.Y+1.Z-SNAPSHOT`)
4. gr cleanDist   // this way you don't have two jars on your dev-classpath

*/
